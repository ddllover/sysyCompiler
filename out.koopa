decl @getint(): i32
decl @getch(): i32
decl @getarray(*i32): i32
decl @putint(i32)
decl @putch(i32)
decl @putarray(i32, *i32)
decl @starttime()
decl @stoptime()

fun @main():i32 {
%entry:
  %ret = alloc i32
  jump %begin

%begin:
  jump %while_entry_1

%while_entry_1:
  br 1, %while_body_1, %while_end_1

%while_body_1:
  @a_2= alloc i32
  store 1, @a_2

  @b_2= alloc i32
  store 2, @b_2

  %0 = load @a_2
  %1 = eq %0, 1
  br %1, %then_1, %else_1

%then_1:
  jump %while_entry_2

%while_entry_2:
  %2 = load @a_2
  %3 = load @b_2
  %4 = lt %2, %3
  br %4, %while_body_2, %while_end_2

%while_body_2:
  jump %while_entry_3

%while_entry_3:
  %result_1 = alloc i32
  store 1,%result_1
  %5 = load @a_2
  %6 = load @b_2
  %7 = lt %5, %6
  %8 = ge 0, %7
  br %8, %lor_r1, %lor_l1

%lor_r1:
  %9 = load @b_2
  %10 = sub %9, 1
  %11 = eq %10, 0
  %12 = ne 0, %11
 store %12,%result_1
  jump %lor_l1

%lor_l1:
  %13= load %result_1
  br %13, %while_body_3, %while_end_3

%while_body_3:
  %14 = load @a_2
  %15 = add %14, 1
  store %15, @a_2

  jump %while_entry_3

%while_end_3:
  store 1, @b_2

  %16 = load @a_2
  %17 = add %16, 1
  store %17, @a_2

  br 3, %then_2, %if_end_2

%then_2:
  jump %while_entry_2

%while_body_2_continue_1:
  jump %if_end_2

%if_end_2:
  jump %while_entry_2

%while_end_2:
  jump %if_end_1

%else_1:
  %18 = load @b_2
  %19 = eq %18, 6
  br %19, %then_3, %if_end_3

%then_3:
  jump %while_end_1

%while_body_1_break_1:
  jump %if_end_3

%if_end_3:
  jump %if_end_1

%if_end_1:
  @b_3= alloc i32
  store 6, @b_3

  %20 = load @b_3
  %21 = eq %20, 6
  br %21, %then_4, %else_4

%then_4:
  %result_2 = alloc i32
  store 1,%result_2
  %22 = ge 0, 10
  br %22, %lor_r2, %lor_l2

%lor_r2:
  %23 = load @b_3
  %24 = ne 0, %23
 store %24,%result_2
  jump %lor_l2

%lor_l2:
  %25= load %result_2
  %26 = mul 8, %25
  store %26, %ret

  jump %end

%ret_1:
  jump %if_end_4

%else_4:
  jump %while_entry_4

%while_entry_4:
  br 0, %while_body_4, %while_end_4

%while_body_4:
  jump %while_entry_4

%while_end_4:
  jump %if_end_4

%if_end_4:
  jump %while_entry_1

%while_end_1:
  %27 = sub 0, 1
  store %27, %ret

  jump %end

%ret_2:
  jump %end

%end:
  %28 = load %ret
  ret %28
}

